//#pragma GCC optimize("Ofast,no-stack-protector,unroll-loops,fast-math")
//#pragma GCC target("avx,avx2,fma")
#include <bits/stdc++.h>
#define f first
#define s second
#define fore(i,a,b) for(int i = (a), ThxMK = (b); i < ThxMK; ++i)
#define pb push_back
#define all(s) begin(s), end(s)
#define _ ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define sz(s) int(s.size())
#define ENDL '\n'
using namespace std;
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/trie_policy.hpp>
// using namespace __gnu_pbds;
// typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
typedef long double ld;
typedef long long lli;
typedef pair<lli,lli> ii;
typedef vector<lli> vi;
#define deb(x) cout << #x": " << (x) << endl;
template <typename T> static constexpr T inf = numeric_limits<T>::max() / 2;
// unsigned int
// mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count());
// long long
// mt19937_64 rnd(chrono::steady_clock::now().time_since_epoch().count());
// int en rango [L,R]
// auto rnd=bind(uniform_int_distribution<int>(L,R), mt19937(time(0)));
// long long en rango [L,R]
// auto rnd=bind(uniform_int_distribution<long long>(L,R), mt19937(time(0)));
// double en rango [L, R)
// auto rnd=bind(uniform_real_distribution<double>(L,R), mt19937(time(0)));
lli MOD = 1e9 + 7;
lli gcd(lli a, lli b){return (b?gcd(b,a%b):a);}
lli lcm(lli a, lli b){ if(!a || !b) return 0; return a * b / gcd(a, b); }
int popcount(lli x) { return __builtin_popcountll(x); }
lli powm(lli a, lli b){
    lli res =1;
    while(b){ if(b&1) res = (res * a) % MOD; a = (a*a) % MOD; b/=2; }
    return res;
}
lli invm(lli a) {
  return powm(a, MOD - 2);
}
lli poww(lli a, lli b){
    lli res =1;
    while(b){ if(b&1) res = res * a; a = a*a; b/=2; }
    return res;
}
vi sieve(int N){
    vi m(N+1,0);
    vi primes(1,2);
    for(int i = 4; i < N; i += 2) m[i]=1;
    for(int i = 3; i*i <= N; i +=2) if(!m[i]) for(int j = i*i; j < N; j += i) m[j]=1;
    for(int i = 3; i < N; i += 2) if(!m[i]) primes.pb(i);
    return primes;
}

vector<int> criba;
void makeCriba(int z) {
    criba.assign(z, -1);
    criba[0] = 0;
    criba[1] = 1;
    for(int i = 2; i < z; ++i) {
        if(criba[i] == -1) {
            for(int j = i; j < z; j += i)
                criba[j] = i;
        }
    }
}

vi mnSum;
void precalc(int z) {
    makeCriba(z);
    mnSum.resize(z);
    mnSum[0] = 0;
    mnSum[1] = 1;
    fore(i, 2, z) {
        lli x = i;
        mnSum[i] = 0;
        while(x != 1) {
            mnSum[i] += criba[x];
            x /= criba[x];
        }
    }
}

vi ans;
vi vcur;
int cur[50];
int zz = 1e6;

void solve(int u, int left, int idx) {
    if(!ans.empty()) {
        if(idx >= sz(ans)) return;
    }
    if(left == 0) {
        if(u == 1) {
            if(ans.empty() or sz(ans) > idx) {
                ans.clear();
                fore(i, 0, idx) ans.pb(cur[i]);
            }
        }
        return;
    }
    if(u == 1) {
        idx += left;
        if(ans.empty() or sz(ans) > idx) {
            ans.clear();
            fore(i, 0, idx) ans.pb(cur[i]);
        }
        return;
    }
    if(u < zz and mnSum[u] > left) return;
    for(int i = left; i > 1; --i) {
        if(u % i == 0) {
            cur[idx] = i;
            solve(u / i, left - i, idx + 1);
            cur[idx] = 1;
        }
    }
}

void solve() {
    lli x; cin >> x;
    ans.clear();
    solve(x, 41, 0);
    if(ans.empty()) cout << -1 << ENDL;
    else {
        cout << sz(ans) << " ";
        for(auto it : ans) cout << it << " ";
        cout << ENDL;
    }
}

int main(){ _
    fore(i, 0, 50) cur[i] = 1;
 precalc(zz);
  lli t; cin >> t;
  for(int tt = 1; tt <= t; ++tt) {
    cout << "Case #" << tt << ": ";
    solve();
  }
  return 0;
}
