int determinant() {
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
                A[i][j] %= mod;
        lli res = 1;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                for (; A[j][i]; res = -res) {
                    long long t = A[i][i] / A[j][i];
                    for (int k = i; k < n; k++) {
                        A[i][k] = (A[i][k] - A[j][k] * t) % mod;
                        std::swap(A[j][k], A[i][k]);
                    }
                }
            }
            if (A[i][i] == 0)
                return 0;
            res = res * A[i][i] % mod;
        }
        if (res < 0)
            res += mod;
        return static_cast<int>(res);
    }
    
    // //_______________Other determinant____________
// //WORKS only if is out of the struct 
// int determinantOfMatrix(vector<vector<lli>> mat,int n)   {   
//     lli num1,num2,det = 1,index,total = 1;   
//     lli temp[n + 1];   
//     for(int i = 0; i < n; i++){       
//         index = i;    
//         while(mat[index][i] == 0 && index < n) {   
//             index++;                   
//         }   
//         if(index == n)     
//             continue;        
//         if(index != i){   
//             for(int j = 0; j < n; j++)   
//                 swap(mat[index][j],mat[i][j]);      
//             det = (det*mod_pow(-1,index-i)%mod + mod)%mod;     
//         }      
//         for(int j = 0; j < n; j++)      
//            temp[j] = mat[i][j];   
//         for(int j = i+1; j < n; j++){   
//             num1 = temp[i];    
//             num2 = mat[j][i];    
//             for(int k = 0; k < n; k++)      
//                 mat[j][k] = (num1 * mat[j][k]%mod - num2 * temp[k]%mod+2*mod)%mod;              
//             total = (total * num1%mod +mod)%mod; 
//         }   
//     }   
//     for(int i = 0; i < n; i++)    
//         det = (det * mat[i][i]%mod+mod)%mod;       
//     return (det*mod_pow(total,mod-2)%mod+mod)%mod;   
// }
// //_________Other____________//
// // this can be inside of the struct 
// int determinant(){
//         lli res = 1;
//         vector<bool> used(n);
//         for (int i = 0; i < n; i++) {
//             int p;
//             for (p = 0; p < n; p++) {
//                 if (!used[p] && A[p][i])
//                     break;
//             }
//             if (p >= n)
//                 return 0;

//             res = (res * A[p][i]) % mod;
//             used[p] = true;

//             int z = mod_pow(A[p][i], mod - 2);
//             for (int j = 0; j < n; j++)
//                 A[p][j] = static_cast<int>(1ll * A[p][j] * z % mod);

//             for (int j = 0; j < n; j++) {
//                 if (j != p) {
//                     z = A[j][i];
//                     for (int k = 0; k < n; k++) {
//                         A[j][k] -= static_cast<int>(1ll * z * A[p][k] % mod);
//                         if (A[j][k] >= mod)
//                             A[j][k] -= mod;
//                         else if (A[j][k] < 0)
//                             A[j][k] += mod;
//                     }
//                 }
//             }
//         }
//         return static_cast<int>(res);
//     }